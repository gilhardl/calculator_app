// Mocks generated by Mockito 5.0.10 from annotations
// in calculator_app/test/pi_value_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:calculator/calculator.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

/// A class which mocks [Calculator].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalculator extends _i1.Mock implements _i2.Calculator {
  MockCalculator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  double add(double? a, double? b) =>
      (super.noSuchMethod(Invocation.method(#add, [a, b]), returnValue: 0.0)
          as double);
  @override
  double substract(double? a, double? b) => (super
          .noSuchMethod(Invocation.method(#substract, [a, b]), returnValue: 0.0)
      as double);
  @override
  double multiply(double? a, double? b) => (super
          .noSuchMethod(Invocation.method(#multiply, [a, b]), returnValue: 0.0)
      as double);
  @override
  double divide(double? a, double? b) =>
      (super.noSuchMethod(Invocation.method(#divide, [a, b]), returnValue: 0.0)
          as double);
  @override
  _i3.Future<double> square(double? a) =>
      (super.noSuchMethod(Invocation.method(#square, [a]),
          returnValue: Future<double>.value(0.0)) as _i3.Future<double>);
  @override
  _i3.Stream<double> pi() => (super.noSuchMethod(Invocation.method(#pi, []),
      returnValue: Stream<double>.empty()) as _i3.Stream<double>);
}
